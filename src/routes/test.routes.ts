import { Router } from 'express';
import { prisma } from '../utils/database';
import { AuthUtils } from '../utils/auth';
import logger from '../utils/logger';

const router = Router();

// Test endpoint for application creation without email
router.post('/test-application', async (req, res) => {
    try {
        const { jobId, candidateEmail, firstName, lastName } = req.body;
        
        logger.info('Testing application creation', { jobId, candidateEmail });

        // Check if job exists
        const job = await prisma.jobPost.findUnique({
            where: { id: jobId },
            include: { organization: true }
        });

        if (!job) {
            return res.status(404).json({
                success: false,
                message: 'Job not found'
            });
        }

        // Check if candidate exists
        const existingCandidate = await prisma.user.findUnique({
            where: { email: candidateEmail }
        });

        let candidateId: bigint;
        let isNewUser = false;

        if (existingCandidate) {
            candidateId = existingCandidate.id;
            logger.info('Using existing candidate', { candidateId: candidateId.toString() });
        } else {
            // Create new candidate
            const randomPassword = AuthUtils.generateRandomPassword();
            const hashedPassword = await AuthUtils.hashPassword(randomPassword);
            
            const newUser = await prisma.user.create({
                data: {
                    email: candidateEmail,
                    password: hashedPassword,
                    firstName: firstName || 'Test',
                    lastName: lastName || 'User',
                    userType: 'CANDIDATE',
                    userRole: 'CANDIDATE',
                    isAutoGeneratedPassword: true
                }
            });
            
            candidateId = newUser.id;
            isNewUser = true;
            logger.info('Created new candidate', { candidateId: candidateId.toString(), password: randomPassword });
        }

        // Create application
        const application = await prisma.application.create({
            data: {
                jobId,
                candidateId,
                recruiterId: BigInt(2), // Test recruiter ID
                organizationId: job.organizationId,
                status: 'PENDING',
                notes: 'Test application creation'
            }
        });

        logger.info('Application created successfully', { applicationId: application.id.toString() });

        res.json({
            success: true,
            data: {
                applicationId: application.id.toString(),
                candidateId: candidateId.toString(),
                isNewUser,
                jobTitle: job.name,
                organizationName: job.organization.name
            },
            message: 'Test application created successfully'
        });

    } catch (error) {
        logger.error('Error in test application creation', { error });
        res.status(500).json({
            success: false,
            message: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});

export default router;
