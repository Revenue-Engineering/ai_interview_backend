export interface BaseEntity {
    id: bigint; // BigInt
    createdAt: Date;
    updatedAt: Date;
}

export interface IUser {
    id: bigint;                    // BigInt
    organizationId?: number;       // Integer - optional for candidates
    userType: string;              // VARCHAR(50)
    userRole: string;              // VARCHAR(50)
    photoUrl?: string | null;      // VARCHAR(255) — optional or nullable
    firstName: string;             // VARCHAR(100)
    lastName: string;              // VARCHAR(100)
    email: string;                 // VARCHAR(100)
    password: string;              // VARCHAR(255)
    emailVerifiedAt?: Date | null; // DATETIME — when email verified
    emailVerificationToken?: string | null; // VARCHAR(255) — email verification token
    emailVerificationExpires?: Date | null; // DATETIME — email verification token expiry
    passwordResetToken?: string | null; // VARCHAR(255) — password reset token
    passwordResetExpires?: Date | null; // DATETIME — password reset token expiry
    isAutoGeneratedPassword?: boolean; // Boolean - indicates if password was auto-generated
    createdAt: Date;               // DATETIME — record created timestamp
    deletedAt?: Date | null;       // DATETIME — soft-delete timestamp, if deleted
}

export interface ICandidateDetails {
    id?: bigint;
    userId: bigint;
    dateOfBirth?: Date | null;
    phoneNumber?: string | null;
    location?: string | null;
    skills?: string | null;
    education?: string | null;
    experience?: string | null;
    resumeUrl?: string | null;
    portfolioUrl?: string | null;
    linkedInUrl?: string | null;
    githubUrl?: string | null;
    desiredJobTitle?: string | null;
    preferredWorkLocation?: string | null;
    salaryExpectation?: number | null;
    noticePeriod?: string | null;
    workAuthorization?: string | null;
    linkedInProfile?: string | null;
    preferredJobType?: string | null;
    languagesSpoken?: string | null;
    status?: string | null;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date | null;
}

export interface IOrganizationInput {
    name: string;
    description: string;
    website: string;
    industry: string;
    size: string;
    location: string;
}

export interface IUserRegistrationInput {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
    organization: IOrganizationInput;
    organizationId?: string; // Optional for linking to existing org
    userType: 'recruiter' | 'candidate' | 'user'; // User type
}

export interface ICandidateRegistrationInput {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
    candidateDetails: {
        phoneNumber?: string;
        location?: string;
        skills?: string;
        education?: string;
        experience?: string;
        resumeUrl?: string;
        portfolioUrl?: string;
        linkedInUrl?: string;
        githubUrl?: string;
        desiredJobTitle?: string;
        preferredWorkLocation?: string;
        salaryExpectation?: number;
        noticePeriod?: string;
        workAuthorization?: string;
        linkedInProfile?: string;
        preferredJobType?: string;
        languagesSpoken?: string;
    };
}

export interface IUpdateUserInput {
    firstName?: string;
    lastName?: string;
    email?: string;
    password?: string;
    photoUrl?: string | null;
    userType?: string;
    userRole?: string;
    emailVerifiedAt?: Date | null;
    emailVerificationToken?: string | null;
    emailVerificationExpires?: Date | null;
    passwordResetToken?: string | null;
    passwordResetExpires?: Date | null;
}

export interface IUserLoginInput {
    email: string;
    password: string;
}

export interface IForgotPasswordInput {
    email: string;
}

export interface IResetPasswordInput {
    token: string;
    password: string;
}

export interface IVerifyEmailInput {
    token: string;
}

export interface IResendVerificationInput {
    email: string;
}

// Job Post interfaces
export interface IJobPost {
    id?: number;
    name: string;
    slug: string;
    numberOfOpenings: number;
    minimumExperience: number;
    maximumExperience: number;
    minAnnualSalary: number;
    maxAnnualSalary: number;
    jobSkill: string;
    jobCategory: string;
    city?: string | null;
    locality?: string | null;
    country?: string | null;
    state?: string | null;
    address?: string | null;
    enableJobApplicationForm: boolean;
    specialization?: string | null;
    jobDescriptionText?: string | null;
    currencyId: number;
    salaryType: string;
    jobPostingStatus: string;
    applicationFormUrl?: string | null;
    sharedJobImage?: string | null;
    createdOn?: Date;
    createdBy: number;
    updatedOn?: Date;
    updatedBy: number;
    organizationId: number;
    userId: bigint;
}

export interface ICreateJobPostInput {
    name: string;
    numberOfOpenings: number;
    minimumExperience: number;
    maximumExperience: number;
    minAnnualSalary: number;
    maxAnnualSalary: number;
    jobSkill: string;
    jobCategory: string;
    city?: string;
    locality?: string;
    country?: string;
    state?: string;
    address?: string;
    enableJobApplicationForm?: boolean;
    specialization?: string;
    jobDescriptionText?: string;
    currencyId: number;
    salaryType: string;
    jobPostingStatus: string;
    applicationFormUrl?: string;
    sharedJobImage?: string;
}

export interface IUpdateJobPostInput extends Partial<ICreateJobPostInput> {
    updatedBy: number;
}

// Pagination types
export interface PaginationParams {
    page?: number;
    limit?: number;
    sortBy?: string;
    sortOrder?: 'asc' | 'desc';
}

export interface PaginatedResponse<T> {
    data: T[];
    pagination: {
        page: number;
        limit: number;
        total: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    };
}

export interface IAuthToken {
    token: string;
    expiresIn: string;
    user: {
        id: string;
        email: string;
        firstName: string;
        lastName: string;
        type: 'recruiter' | 'candidate' | 'user';
    };
}

// Organization types
export interface Organization extends BaseEntity {
    organizationId?: number; // Integer
    name: string;
    description?: string;
    website?: string;
    industry?: string;
    size?: string;
    location?: string;
}

export interface CreateOrganizationDto {
    organizationId?: number; // Integer
    name: string;
    description?: string;
    website?: string;
    industry?: string;
    size?: string;
    location?: string;
}

export interface UpdateOrganizationDto extends Partial<CreateOrganizationDto> { }

// Application interfaces
export interface IApplication {
    id?: bigint;
    jobId: number;
    candidateId: bigint;
    recruiterId: bigint;
    organizationId: number;
    status: string;
    applicationDate?: Date;
    reviewDate?: Date | null;
    notes?: string | null;
    isInvited?: boolean;
    invitedAt?: Date | null;
    applicationUrl?: string | null;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date | null;
}

export interface ICreateApplicationInput {
    jobId: number;
    candidateEmails: string[];
    candidateDetails?: ICsvCandidateData[];
    notes?: string;
}

export interface ICsvCandidateData {
    email: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string;
    location?: string;
    skills?: string;
    education?: string;
    experience?: string;
    resumeUrl?: string;
    portfolioUrl?: string;
    linkedInUrl?: string;
    githubUrl?: string;
    desiredJobTitle?: string;
    preferredWorkLocation?: string;
    salaryExpectation?: number;
    noticePeriod?: string;
    workAuthorization?: string;
    linkedInProfile?: string;
    preferredJobType?: string;
    languagesSpoken?: string;
}

export interface IUpdateApplicationInput {
    status?: string;
    reviewDate?: Date;
    notes?: string;
    isInvited?: boolean;
    invitedAt?: Date;
    applicationUrl?: string;
}

export interface IApplicationResult {
    success: boolean;
    candidateEmail: string;
    message: string;
    isNewUser?: boolean;
    userId?: bigint | string;
    applicationId?: bigint | string;
}

export interface IBulkApplicationResult {
    totalProcessed: number;
    successful: number;
    failed: number;
    results: IApplicationResult[];
}

// Enhanced Interview Types
export interface IInterview {
    id?: bigint;
    applicationId: bigint;
    scheduledAt: Date;
    startedAt?: Date | null;
    endedAt?: Date | null;
    mode: string;
    status: string;
    durationMinutes: number;
    timezone: string;
    createdBy: bigint;
    aiScore?: number | null;
    aiFeedbackSummary?: string | null;
    plagiarismFlagged?: boolean;
    integrityFlags?: any;
    interviewType: string;
    timeSlotStart: Date;
    timeSlotEnd: Date;
    createdAt?: Date;
    updatedAt?: Date;
}

export interface ICreateInterviewInput {
    applicationId: bigint;
    scheduledAt: Date;
    mode: 'live' | 'async';
    durationMinutes: number;
    timezone: string;
    interviewType: 'coding' | 'technical' | 'behavioral' | 'system_design' | 'case_study';
    timeSlotStart: Date;
    timeSlotEnd: Date;
    notes?: string;
}

export interface IUpdateInterviewInput {
    scheduledAt?: Date;
    mode?: 'live' | 'async';
    status?: 'pending' | 'scheduled' | 'in_progress' | 'completed' | 'expired' | 'cancelled';
    durationMinutes?: number;
    timezone?: string;
    interviewType?: 'coding' | 'technical' | 'behavioral' | 'system_design' | 'case_study';
    timeSlotStart?: Date;
    timeSlotEnd?: Date;
    aiScore?: number;
    aiFeedbackSummary?: string;
    plagiarismFlagged?: boolean;
    integrityFlags?: any;
}

// Coding Interview Types
export interface IDsaQuestion {
    id?: bigint;
    name: string;
    level: string;
    problemStatement: string;
    inputFormat: string;
    constraints: string;
    inputExample: string;
    outputFormat: string;
    outputExample: string;
    explanation: string;
    editorialAnswerInCpp: string;
    testCase1Input: string;
    testCase1Output: string;
    testCase2Input: string;
    testCase2Output: string;
    testCase3Input: string;
    testCase3Output: string;
    topic: string;
    timeLimit: number;
    isActive: boolean;
    createdBy?: bigint;
    createdAt?: Date;
    updatedAt?: Date;
}

export interface ICreateDsaQuestionInput {
    name: string;
    level: string;
    problemStatement: string;
    inputFormat: string;
    constraints: string;
    inputExample: string;
    outputFormat: string;
    outputExample: string;
    explanation: string;
    editorialAnswerInCpp: string;
    testCase1Input: string;
    testCase1Output: string;
    testCase2Input: string;
    testCase2Output: string;
    testCase3Input: string;
    testCase3Output: string;
    topic: string;
    timeLimit?: number;
    isActive?: boolean;
    createdBy?: bigint | undefined;
}

export interface IUpdateDsaQuestionInput extends Partial<ICreateDsaQuestionInput> { }

export interface IInterviewQuestion {
    id?: bigint;
    interviewId: bigint;
    dsaQuestionId: bigint;
    orderIndex: number;
    timeLimit?: number;
    createdAt?: Date;
}

export interface ICreateInterviewQuestionInput {
    interviewId: bigint;
    dsaQuestionId: bigint;
    orderIndex?: number;
    timeLimit?: number;
}

export interface IUpdateInterviewQuestionInput extends Partial<ICreateInterviewQuestionInput> { }

// User Code Submission Types
export interface IUserCodeSubmission {
    id?: bigint;
    dsaQuestionId: bigint;
    expectedOutput: string;
    userId: bigint;
    interviewId?: bigint;
    userCode: string;
    language: string;
    attemptNumber: number;
    isSubmitted: boolean;
    submittedAt?: Date | null;
    executionTime?: number | null;
    memoryUsed?: number | null;
    testCasesPassed?: number | null;
    totalTestCases?: number | null;
    score?: number | null;
    feedback?: string | null;
    createdAt?: Date;
    updatedAt?: Date;
}

export interface ICreateCodeSubmissionInput {
    dsaQuestionId: bigint;
    userId: bigint;
    interviewId?: bigint;
    userCode: string;
    language: string;
    attemptNumber?: number;
    isSubmitted?: boolean;
    submittedAt?: Date;
    executionTime?: number;
    memoryUsed?: number;
    testCasesPassed?: number;
    totalTestCases?: number;
    score?: number;
    feedback?: string;
}

export interface IUpdateCodeSubmissionInput extends Partial<ICreateCodeSubmissionInput> { }

// Interview Start Validation
export interface IInterviewStartValidation {
    canStart: boolean;
    message: string;
    reason?: 'expired' | 'future' | 'valid';
    timeSlotStart?: Date;
    timeSlotEnd?: Date;
    currentTime?: Date;
}