generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       BigInt            @id @default(autoincrement())
  organizationId           Int?
  userType                 String            @db.VarChar(50)
  userRole                 String            @db.VarChar(50)
  photoUrl                 String?           @db.VarChar(255)
  firstName                String            @db.VarChar(100)
  lastName                 String            @db.VarChar(100)
  email                    String            @unique @db.VarChar(100)
  password                 String            @db.VarChar(255)
  emailVerifiedAt          DateTime?
  emailVerificationToken   String?           @db.VarChar(255)
  emailVerificationExpires DateTime?
  passwordResetToken       String?           @db.VarChar(255)
  passwordResetExpires     DateTime?
  createdAt                DateTime          @default(now())
  deletedAt                DateTime?
  isAutoGeneratedPassword  Boolean           @default(false)
  applications             Application[]     @relation("CandidateApplications")
  createdApplications      Application[]     @relation("RecruiterApplications")
  candidateDetails         CandidateDetails?
  interviews               Interview[]       @relation("CreatedInterviews")
  jobPosts                 JobPost[]
  organization             Organization?     @relation("OrganizationUsers", fields: [organizationId], references: [id])
  userCodeSubmissions      UserCodeSubmission[] @relation("UserCodeSubmissions")
  createdDsaQuestions      DsaQuestion[]        @relation("CreatedDsaQuestions")

  @@index([organizationId])
  @@index([userType])
  @@index([userRole])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([emailVerifiedAt])
  @@map("users")
}

model CandidateDetails {
  id                    BigInt    @id @default(autoincrement())
  userId                BigInt    @unique
  dateOfBirth           DateTime?
  phoneNumber           String?   @db.VarChar(20)
  location              String?   @db.VarChar(255)
  skills                String?
  education             String?
  experience            String?
  resumeUrl             String?   @db.VarChar(255)
  portfolioUrl          String?   @db.VarChar(255)
  linkedInUrl           String?   @db.VarChar(255)
  githubUrl             String?   @db.VarChar(255)
  desiredJobTitle       String?   @db.VarChar(100)
  preferredWorkLocation String?   @db.VarChar(100)
  salaryExpectation     Decimal?  @db.Decimal(10, 2)
  noticePeriod          String?   @db.VarChar(50)
  workAuthorization     String?   @db.VarChar(100)
  linkedInProfile       String?   @db.VarChar(255)
  preferredJobType      String?   @db.VarChar(50)
  languagesSpoken       String?
  status                String?   @db.VarChar(50)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deletedAt             DateTime?
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([skills])
  @@index([location])
  @@index([status])
  @@index([createdAt])
  @@map("candidate_details")
}

model Organization {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(100)
  description  String?
  website      String?       @db.VarChar(255)
  industry     String?       @db.VarChar(100)
  size         String?       @db.VarChar(50)
  location     String?       @db.VarChar(100)
  applications Application[]
  jobPosts     JobPost[]
  users        User[]        @relation("OrganizationUsers")

  @@index([name])
  @@map("organizations")
}

model JobPost {
  id                       Int           @id @default(autoincrement())
  name                     String        @db.VarChar(255)
  slug                     String        @unique @db.VarChar(100)
  numberOfOpenings         Int
  minimumExperience        Int
  maximumExperience        Int
  minAnnualSalary          Int
  maxAnnualSalary          Int
  jobSkill                 String
  jobCategory              String        @db.VarChar(100)
  city                     String?       @db.VarChar(100)
  locality                 String?       @db.VarChar(100)
  country                  String?       @db.VarChar(100)
  state                    String?       @db.VarChar(100)
  address                  String?
  enableJobApplicationForm Boolean       @default(false)
  specialization           String?       @db.VarChar(100)
  jobDescriptionText       String?
  currencyId               Int
  salaryType               String        @db.VarChar(50)
  jobPostingStatus         String        @db.VarChar(50)
  applicationFormUrl       String?       @db.VarChar(255)
  sharedJobImage           String?       @db.VarChar(255)
  createdOn                DateTime      @default(now())
  createdBy                Int
  updatedOn                DateTime      @updatedAt
  updatedBy                Int
  organizationId           Int
  userId                   BigInt
  applications             Application[]
  organization             Organization  @relation(fields: [organizationId], references: [id])
  user                     User          @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@index([jobCategory])
  @@index([city])
  @@index([jobPostingStatus])
  @@map("job_posts")
}

model Application {
  id              BigInt       @id @default(autoincrement())
  jobId           Int
  candidateId     BigInt
  recruiterId     BigInt
  organizationId  Int
  status          String       @default("PENDING") @db.VarChar(50)
  applicationDate DateTime     @default(now())
  reviewDate      DateTime?
  notes           String?
  isInvited       Boolean      @default(false)
  invitedAt       DateTime?
  applicationUrl  String?      @db.VarChar(500)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  deletedAt       DateTime?
  candidate       User         @relation("CandidateApplications", fields: [candidateId], references: [id])
  job             JobPost      @relation(fields: [jobId], references: [id])
  organization    Organization @relation(fields: [organizationId], references: [id])
  recruiter       User         @relation("RecruiterApplications", fields: [recruiterId], references: [id])
  interviews      Interview[]

  @@unique([jobId, candidateId])
  @@index([jobId])
  @@index([candidateId])
  @@index([recruiterId])
  @@index([organizationId])
  @@index([status])
  @@index([applicationDate])
  @@index([createdAt])
  @@map("applications")
}

// Interview model
model Interview {
  id                    BigInt      @id @default(autoincrement())
  applicationId         BigInt
  scheduledAt           DateTime
  startedAt             DateTime?
  endedAt               DateTime?
  mode                  String      @db.VarChar(20)
  status                String      @default("pending") @db.VarChar(20)
  durationMinutes       Int         @default(60)
  timezone              String      @default("UTC") @db.VarChar(50)
  createdBy             BigInt
  aiScore               Decimal?    @db.Decimal(5, 2)
  aiFeedbackSummary     String?     @db.Text
  plagiarismFlagged     Boolean     @default(false)
  integrityFlags        Json?
  interviewType         String      @db.VarChar(50) // 'coding', 'technical', 'behavioral', etc.
  timeSlotStart         DateTime    // Start time of the allowed time slot
  timeSlotEnd           DateTime    // End time of the allowed time slot
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  // Relations
  application           Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  creator               User        @relation("CreatedInterviews", fields: [createdBy], references: [id])
  interviewQuestions    InterviewQuestion[]
  userSubmissions       UserCodeSubmission[]

  @@index([applicationId])
  @@index([createdBy])
  @@index([status])
  @@index([scheduledAt])
  @@index([mode])
  @@index([interviewType])
  @@index([timeSlotStart])
  @@index([timeSlotEnd])
  @@map("interviews")
}

// Master DSA Questions Pool
model DsaQuestion {
  id                    BigInt      @id @default(autoincrement())
  name                  String      @db.VarChar(255) // Changed from title to name to match CSV
  level                 String      @db.VarChar(20) // Changed from difficulty to level to match CSV
  problemStatement      String      @db.Text // Changed from description to problemStatement
  inputFormat           String      @db.Text
  constraints           String      @db.Text
  inputExample          String      @db.Text
  outputFormat          String      @db.Text
  outputExample         String      @db.Text
  explanation           String      @db.Text
  editorialAnswerInCpp  String      @db.Text
  testCase1Input        String      @db.Text
  testCase1Output       String      @db.Text
  testCase2Input        String      @db.Text
  testCase2Output       String      @db.Text
  testCase3Input        String      @db.Text
  testCase3Output       String      @db.Text
  topic                 String      @db.VarChar(100) // 'arrays', 'strings', 'trees', etc.
  timeLimit             Int         @default(30) // Time limit in minutes
  isActive              Boolean     @default(true)
  createdBy             BigInt?     // Who created this question
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  // Relations
  interviewQuestions    InterviewQuestion[]
  userSubmissions       UserCodeSubmission[]
  creator               User?       @relation("CreatedDsaQuestions", fields: [createdBy], references: [id])

  @@index([level])
  @@index([topic])
  @@index([isActive])
  @@index([createdBy])
  @@map("dsa_questions")
}

// Interview Questions (tracks which questions were asked in each interview)
model InterviewQuestion {
  id                    BigInt      @id @default(autoincrement())
  interviewId           BigInt
  dsaQuestionId         BigInt
  orderIndex            Int         @default(0) // For ordering questions in interview
  timeLimit             Int?        // Override time limit for this specific interview
  createdAt             DateTime    @default(now())

  // Relations
  interview             Interview   @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  dsaQuestion           DsaQuestion @relation(fields: [dsaQuestionId], references: [id], onDelete: Cascade)

  @@unique([interviewId, dsaQuestionId])
  @@index([interviewId])
  @@index([dsaQuestionId])
  @@index([orderIndex])
  @@map("interview_questions")
}

// User Code Submissions
model UserCodeSubmission {
  id                    BigInt      @id @default(autoincrement())
  dsaQuestionId         BigInt      // Reference to the DSA question
  userId                BigInt
  interviewId           BigInt?     // Optional: track which interview this was for
  userCode              String      @db.Text
  language              String      @db.VarChar(50) // 'javascript', 'python', 'java', etc.
  attemptNumber         Int         @default(1)
  isSubmitted           Boolean     @default(false)
  submittedAt           DateTime?
  executionTime         Int?        // Execution time in milliseconds
  memoryUsed            Int?        // Memory used in MB
  testCasesPassed       Int?
  totalTestCases        Int?
  score                 Decimal?    @db.Decimal(5, 2) // Score out of 100
  feedback              String?     @db.Text
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  // Relations
  dsaQuestion           DsaQuestion @relation(fields: [dsaQuestionId], references: [id], onDelete: Cascade)
  user                  User        @relation("UserCodeSubmissions", fields: [userId], references: [id])
  interview             Interview?  @relation(fields: [interviewId], references: [id], onDelete: SetNull)

  @@index([dsaQuestionId])
  @@index([userId])
  @@index([interviewId])
  @@index([language])
  @@index([attemptNumber])
  @@index([isSubmitted])
  @@map("user_code_submissions")
}

enum UserType {
  RECRUITER
  CANDIDATE
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

enum CandidateStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  SHORTLISTED
  REJECTED
  HIRED
  WITHDRAWN
}
